2. Функциональные требования
2.1. Чтение файла

Скрипт должен принимать путь к CSV-файлу как аргумент.
Поддерживать чтение любых валидных CSV-файлов с произвольными колонками.
Гарантируется, что файл валиден (все значения соответствуют типу колонки).


2.2. Фильтрация данных

Поддерживать фильтрацию по одной колонке с операторами: =, >, <.

Условие фильтрации задается через аргумент --where "column=operatorvalue" (например, --where "rating>4.7" или --where "brand=apple").

Поддерживать как текстовые, так и числовые значения колонок.

Не требуется поддержка составных условий (AND/OR) или фильтрации по нескольким колонкам.


2.3. Агрегация данных

Поддерживать агрегацию по одной числовой колонке с типами: avg (среднее), min (минимум), max (максимум).

Условие агрегации задается через аргумент --aggregate "column=agg_type" (например, --aggregate "rating=avg").

Агрегация применяется только к числовым данным.


2.4. Вывод результатов

Результаты фильтрации выводятся в виде таблицы с заголовками (используя tabulate).

Результаты агрегации выводятся в виде таблицы с двумя колонками: "Aggregation" и "Value".

Поддерживать комбинированный вызов (фильтрация + агрегация).


3. Нефункциональные требования
3.1. Используемые библиотеки
argparse для обработки аргументов командной строки.
csv для чтения файлов.
tabulate для красивого вывода таблиц (устанавливается отдельно).
Дополнительные библиотеки разрешены только для тестов.
3.2. Кодовый стиль
Соответствие PEP 8.
Использование аннотаций типов (опционально для баллов).
Возможность легкого расширения функционала (например, новые агрегации).
3.3. Тестирование
Код должен быть покрыт тестами с использованием pytest.
Ориентироваться на 80% покрытия критического функционала.
3.4. Обработка ошибок
Учитывать случаи некорректных аргументов или отсутствия файла (базовая обработка).
4. Этапы разработки
4.1. Настройка проекта
Создать структуру репозитория (например, main.py, tests/).
Установить зависимости (tabulate).
4.2. Реализация чтения данных
Написать функцию для загрузки CSV в список словарей.
Протестировать на примере файла.
4.3. Реализация фильтрации
Создать функцию для фильтрации данных по условию.
Разобрать аргумент --where и применить логику сравнения.
4.4. Реализация агрегации
Создать функцию для вычисления агрегаций.
Разобрать аргумент --aggregate и вычислить результат.
4.5. Интеграция и вывод
Объединить функции в main.
Настроить вывод с помощью tabulate.
4.6. Тестирование
Написать тесты для каждой функции.
Проверить покрытие с pytest-cov.
4.7. Документация и сдача
Добавить примеры запуска (скриншоты).
Сделать репозиторий публичным и отправить ссылку.